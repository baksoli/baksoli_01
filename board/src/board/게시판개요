# 무한레벨 답변형 게시판(첨부파일포함)
1. 기본 요구 사항
	1) 초기 리스트로 제목과 작성자를 통해
		제목, 작성자, 등록일, 조회수를 검색할 수 있는  게시판이다.
	2) 리스트형으로 계층형 답글을 가지고 있다.
	3) 페이징 처리되어 선택적으로 한 페이지에 보일 데이터와 
		3, 5, 10, 20 로 선택하여 페이징 처리할 수 있다.
	4) 하단에는 페이지 별로 이동처리 할 수 있는 인터페이스가 있다.
	5) 등록, 상세화면 확인, 수정, 삭제 처리할 수 있고,
	6) 답글을 등록 할 수 있다.
2. DB설계와 DB관련 Object
	1) board 테이블 구성,
		글 번호, 상위글번호, 제목, 내용, 작성자, 조회수, 등록일, 수정일,
		이메일, 비밀번호
		
	2) board_seq 시퀀스로 자동 key 글번호 numbering을 처리할 수 있다.

3. 화면 UI 
	1) 초기 메인 화면 : 페이징 처리
	2) 등록 화면
	3) 상세 화면
	4) 답글 화면
	
4. 각 기능 화면 개발.
	1) 환경 설정
	
	2) 
	
5. 테스트 확인.
	1) 기능 처리 확인.
	
# 리스트 데이터 가져오기.
1. sql문 작성.
	- 조회 조건
	- 리스트
	ex) 
		SELECT * FROM BOARD
		WHERE 1=1
		AND SUBJECT LIKE '%'||'첫'||'%'
		AND writer LIKE '%'||''||'%';
2. vo 작성
	1) 검색할 vo
	2) list할 데이터 단위데이터인 vo
3. view 화면에서 list controller 호출
4. list controller 작성하여 조회 데이터 확인
5. dao 작성 
6. mapper.xml 작성
7. dao --> service --> controller 
8. model 데이터 화면(view) 전송
9. jsp에서 model 데이터 list 처리
 
# 파일 처리(첨부파일처리)
업로드
1. 파일 저장 정보 DB 설계
	ex) 
		CREATE TABLE boardfile(
			NO NUMBER,
			fname varchar2(100),
			pathname varchar2(500),
			content varchar2(100),
			credte DATE 
		);
		
2. 파일을 upload시 DB에 입력할 VO 작성.
	board.vo.BoardFile 클래스 파일 생성.
3. spring framework 컨테이너에 fileUpload 모듈, 다운로드 모듈 설정
	즉, 파일 처리하는 View를 bean으로 설정.
	ex) dispatcher-servlet 
		<bean id="bnViewResolver"><bean id="multipartResolver"> 설정.
4. 파일업로드 View(jsp) 화면단 구성과 요청값으로 파일업로드 처리.
	1) form enctype="multipart/form-data"
		input type="file" name="report"
		
5. controller 단에서 업로드하는 file을 받는 객체 선언.
	1) 받는 VO 객체 안에 파일을 첨부할 수 있는 속성 선언.
		private MultipartFile[] report;
		
6. service 단에서,
	1) Multipart 파일을 물리적 file객체로 전환하여, 파일을 
		특정 위치에 저장처리.
		- 업로드 위치 (파일 서버)
		
		
	2) DB에 데이터 입력하도록 처리.
7. 등록시 파일 정보 등록 DAO 메서드 선언.
8. 파일 등록 관련 XXXMapper.xml 선언.
======================================================================
다운로드
9. 다운로드 viewer를 클래스로 선언. (dispather-servlet에 <bean>등록)
10. 다운로드 viewer 컨테이너에 선언.
11. 게시판 상세화면에서 해당 파일을 클릭시, 다운로드 되도록 
	js controller 호출. 
	
# 게시판 상세화면 처리.
1. 화면 UI 결정.
	1) 전체 리스트 화면에서 row를 더블 클릭시 상세 데이터 출력.
	2) 상세 화면 리스트 확인
		NO,       refno, 
		regdte,   uptdte,
		subject,  readcnt,  
		writer,   email,
		content
		
		첨부파일 --> fname(파일명) list 형태

		[수정] [삭제] [답글] [메인화면]

2. 더블 클릭시 board?method=detail&no=@@@
	로 상세화면 처리 호출.
3. controller 구성.
	board?method=detail에 no를 입력받는 메서드 선언.
4. dao 
	1) board의 sql, boardfile의 sql 작성
		select * from board where no = @@@
		select * from boardfile where no = @@@
	2) public Board getBoard(int boardno);
	3) public ArrayList<BoardFile> getFile(int boardno);
	4) public void uptReadCnt(int empno);
		
5. mapper 처리
	1) board와 boardfile의 정보를 가져오는 sql 작성.
		select * from board where no = 22;

		select * from boardfile where no = 22;
		
		UPDATE BOARD 
		SET READCNT = READCNT +1
		WHERE NO =22;
		
6. dao - service - contoller 
	1) board VO와 boardFile VO를 model에 한번에 넘길 수 있도록 board에 추가.
		(Board VO에 private ArrayList<BoardFile> fileInfo; 추가)
	2) service
		Board getBoard로 객체 생성,
		setFileInfo로 getBoardFile 데이터를 저장 처리.
		uptReadCnt 처리.
		
7. controller
	1) model 데이터 설정
	2) view 화면 구성.
	
# 수정 / 삭제 처리.
1. sql
	**수정
	UPDATE Board 
	SET UPTDTE = SYSDATE,
		SUBJECT = '수정된 게시글이에요',
		WRITER = '수정자',
		EMAIL = 'editor@gmail.com',
		CONTENT = '수정한 내용입니다.'
	WHERE NO = 12;

	**삭제
	DELETE FROM board WHERE NO = 12;
	
2. dao
	public void updateBoard(Board upt);
	public void deleteBoard(int no);	
3. mapper

4. 화면단에서 
	컨트롤러로 submit -> method=update 호출
	컨트롤러로 location -> method=delete&no=##
5. 컨트롤러 선언.
	method=update 선언 요청값 board 데이터 정상 확인.
	method=delete 선언 요청값 no 데이터 정상 확인.
6. dao -> service -> controller
 

