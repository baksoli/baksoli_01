# spring에서 데이터베이스 연동처리
0. 프로그램과 DB 서버 접속 프로세스
	1) DB 베이스 서버 구축.
		- oracle 사이트에서 11g xe 서버 다운
			접속을 하기 위해 ip, port, sid, 계정, 비밀번호
			ip : tcp/ip 기반의 특정 위치 네트워크 접속
			port : 서버의 특정 연동 통로 
				ex) 웹서버 7080, 오라클 :1521, 메일서버, 파일서버..
		- 계정에 포함된, 2차원 테이블 기반의 데이터를 저장, 수정, 삭제
			로딩을 할 수 있다.
	2) DB client 를 통해서 접속.
		- cmd 창에서 sqlplus 를 통해 계정/비밀번호 이용하여 접속.
		- eclipse에서 지원하는 plugin 프로그램(dbeaver)를 설치하여, 접속.
			드라이브 관리(jdbc 드라이버)
			접속 처리 (새 데이터베이스 연결) 연결 
			DB 내용을 확인.
	3) 프로그래밍(spring)을 접속.
		- jdbc 드라이버를 통해 접속할 수 있다. 
		springweb\WebContent\WEB-INF\lib 하위에 ojdbc6.jar
	4) DB에 있는 데이터를 controller하는 실제 명령어 : sql
		ex)  select * from emp;, insert into 데이블명 values(입력데이터);
		
1. 기본 설정관련.(환경 설정을 위해 필요한 파일 및 설명)
	1) db 연결을 위한 jdbc driver 설정.
		cf) jdbc : java database connection
			java 프로그램으로 db 서버를 연결하기 위한 공통 모듈.
			web에서 lib로 추가.
				springweb\WebContent\WEB-INF\lib\ojdbc6.jar
			
	2) mybatis 연결 모듈(framework).jar
			springweb\WebContent\WEB-INF\lib\
				mybatis-spring-1.0.2.jar,
				mybatis-3.0.6.jar,
				commons-dbcp-1.2.2.jar 
				설정
				
	3) 컨테이너(dispatcher-servlet.xml)에서 (해야할 3가지)
		- dbcp(database connection pool)로 연결 정보와
			jdbc driver 를 통해 db서버에 연동하도록 한다.
			ip, port, sid, 계정, 비밀번호 정보를 입력필요. (resource/properties/info.file)
		- mybatis 연결 정보 설정.
			dbcp 와 연결
			mybatis의 연결을 위한 공통 설정 파일 선언.(mybatis.Srping.xml)
		- mybatix와 연결시, interface를 통해 mybatis가 
			실제 객체를 만들어 주는데, 이 dao interface 
			폴더 위치를 선언.
	
		ex) EmpDao dao = new RealEmpDao();
					RealEmpDao ==> mybatis를 통해서 만들어진 실제 데이터 처리
						결과를 포함하는 실제 객체가 인터페이스명으로 할당되어
						service단에서 사용될 수 있다.
				
			
	4) mybatis의 공통 xml 설정파일 (mybatis.Srping.xml파일)
		- 사용할 VO, DTO 객체를 alias 이름으로 선언.
		- 각 DAO 클래스 단위와 연결하는 XXXMapper.xml를 선언.
			ex) XXXMapper.xml는 BoardDao(인터페이스)와 BoardMapper.xml 연동 
	5) XXXMapper.xml의 선언.
		- 조회, 수정, 삭제 처리하는 sql을 각 기능단위로 선언하는 곳을 말한다.
		
		
2. 프로그래밍 순서.
	1) sql 작성.
		결과값으로 처리할 vo 의 내용 확인
		select * from emp;
	2) VO 작성(조회시 결과 단위데이터를 저장할 객체)
	3) DAO 인터페이스 구성.
		springweb\a03_database\repository 에서 구성.
		
	4) 기능 메서드 선언.
		sql을 통해서 나타나는 데이터를 
		return할 객체, 조회조건 VO
	5) 공통 mybatis.Spring.xml
		- 사용할 VO를 alias로 선언.
		- XXXMapper.xml
	6) XXXMapper.xml
		- 결과 객체 선언. resultMap
		- sql문 처리할 요소 객체 선언.
			-id, 매개변수, return값 선언.
		1. java의 Dao인터페이스에 상속한 실제 객체를 생성해주는 역할을 하는 것이
		XXXMapper.xml 역할이다.
		2. sql의 결과 데이터 ==> 객체로 할당 처리.
		3. DAO인터페이스가 특정한 규칙에 의해서 XXXMapper.xml의 
			속성과 연결처리.
		
jdbc 사용을 위한 lib 3가지
-commons-dbcp-1.2.2.jar
-mybatis-3.0.6.jar
-ojdbc6.jar



ex) 연습문제
select * from dept
기준으로 부서정보 출력 controller를 통해 처리하자.
A02_DeptController.java					
A02_DeptSerivce.java					
DeptDao.java					
DeptMapper.xml


# 데이터 등록 처리 process
1. insert sql문 작성과 test
2. 등록화면 구성 (UI 구성, 데이터를 서버에 전달)
	초기 화면 로딩 controller : @RequestMapping("/empInsForm.do")
	등록 처리 controller : @RequestMapping("/empInsert.do")
		client 에서 데이터를 받은 VO 객체를 가지고 있는 controller
		웹 서버에 데이터베이스에 할당할 데이터를 가지고 있는 상태.
		
3. dao 메서드 구성.
	Emp 객체를 통해서 데이터를 웹 서버에 가지고 있는 상태를 (위에서 ok)
	mybatis라는 framework를 통해서 DB 서버에 접속을 하여, (dispatcher-servlet에서 ok)
	- 어떤 데이터, 어떤 모듈을 통해서 처리를 할지 지정.(ok)
	sql문을 통해 데이터를 입력 처리한다.
	1) dispatcher-servlet.xml 컨테이너에서 지정한
	 	package(springweb.a03_database.repository)에
		interface로 데이터 입력 객체, return할 형식을 선언.
	2) dao 선언.
	3) dao 안에 메서드 선언(입력, return 값 처리)
	4) dao 메서드가 mybatis의 xml로 실제 객체가 만들어 질 수 있게끔
		연동 규칙으로 xml을 선언 해준다.
		
	public void insertEmp(Emp ins);		
4. XXXMapper.xml을 통해서 등록 처리 구성.
5. service, controller 연동 처리.
6. 테스트 확인.

# 상세 화면 처리(수정/삭제할 수 있는 interface 화면)
1. 상세화면 로딩..
	1) 전체 list 화면에서 특정 데이터 클릭시, empno로
		요청값을 넘겨주고, 상세화면 controller 호출. 
	
		sql 확인
		select * 
		from emp01
		where empno=7955
	2) 변경할 수 있는 화면으로 데이터 로딩 처리 구현.
		- dao 처리.
			메서드 empno 데이터가 정수가 입력이 되고, 단위 객체인 
			Emp 객체가 return 되도록 처리.
		- sql 이용해서 1개 단위 데이터를 가져오면서 로딩 처리
		
	3) 상세화면 로딩 후 , 
	4) 수정 버튼 클릭시, 수정 process 처리
	
	5) 삭제 버튼 클릭시, 삭제 process 처리
	
	
# 수정 처리
1. 수정할 sql을 작성과 test(DB client로 확인)
2. 화면 user Interface에서 수정 버튼을 클릭 시, 수정할 데이터를 controller에 전달.
	form, submit
3. 요청하는 controller 구현하여, 매개변수로 수정데이터가 VO로 받아진 것을 확인.
4. DAO단, 수정 처리하는 메서드 선언.
	public void updateEmp(Emp upt);
5. EmpMapper.xml 에서 수정 처리 메서드와 함께 선언할 xml 속성 작성
	<update id="updateEmp" parameterType="emp">
		수정 sql 처리.. 
6. Dao ==> service ==> controller 순으로 처리
7. controller에 수정 후, 처리 process 
	1) 수정된 데이터 조회와, model로 넘겨 detail을 처리하게 한다.
	
# 삭제 처리
1. 삭제할 sql 작성.
2. 화면에 삭제버튼 클릭 시, controller 호출, 요청값 전달(empno).
3. 삭제할 controller 작성. empno 값 호출 확인.
4. 삭제 dao단 구현 public void deleteEmp(int empno);
5. EmpMapper.xml 에서 삭제 요소 선언
	<delete id="deleteEmp" parameterType="int">
6. DAO ==> service ==> controller 순으로 처리
7. controller 삭제 처리 후, list controller로 redirect 처리 

