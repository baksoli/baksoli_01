	인터넷으로도 검색해보고, 수업시간 내용 참고하여 과제 하기!

1. 스프링 환경설정설정에서 
	http://localhost:7080/springweb/start.do url을 기준으로
	web.xml에서 설정되는 내용,
	dispatcher-servlet.xml에서 설정되는 내용,
	controller, View단 처리 내용을 기술하세요
	
	: 
	1) web.xml : front controller 정의(dispatcher-servlet 호출)
		<servlet>
			<servlet-name>dispatcher</servlet-name>
			<servlet-class>org.srpingframework.web.servlet.DispatcherServlet</servlet-class>
		</servlet>
		<servlet-mapping>
			<servlet-name>dispatcher</servlet-name>
			<url-pattern>*.do</url-pattern>
		</servlet-mapping>
	
	2)dispatcher-servlet.xml
		- controller 등록
		- 사용할 객체 등록 메모리로딩
		@Controller, @Service, @Repository가 선언된 클래스는 자동으로 container에 객체로
		등록 되도록 component-scan으로 처리해준다.
		<context:component-scan base-package="springweb">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		</context:component-scan>
		
	3) controller
		1) annotation 선언 (@Controller)
		2) url mapping 주소 추가 메서드로 선언 
			@RequestMapping("/start.do")
			public String start(Model d){
				d.addAttribute("greet","view에서 보여요");
				return "호출할 jsp 페이지"
			}
	
	4) View
		Controller에서 model로 선언한 "greet" 를 el로 호출
			${greet}
		
		
2. 스프링에서 사용되는 개발 패턴 MVC는 무엇을 말하는지 소스 기준으로 설명하세요.
	**Controller 
	@Controller
	public class ControllerClassName{
		@RequestMapping("/호출 주소")
		public String start(Model d){
		**Model : View에 넘길 핵심 데이터로, key, Object형식으로 전달한다.
			d.addAttribute("greet","view로 보낼 데이터")
		}
	}
	**View
	${greet} // 데이터를 "greet"에 담아 model로 선언하여 view에서 호출


3. 스프링 DI에서 namespace를 이용하여, Person(이름, 나이, 사는곳)의
	객체를 생성자로는 이름, set메서드로는 나이,사는 곳을 저장하여 xml에서
	객체를 생성하세요.
	
	<bean class="springweb.a02_di_exp.z01_vo.Person"
		c:name="홍길동" p:age="27" p:loc="서울강남구"/>
		c:_0="생성자첫째데이터" c:_1="생성자의 두번째"
4. 스프링의 autowire는 무엇을 말하는지? DI의 설정값을 기준으로 설명하세요.
	객체가 컨테이너에서 메모리에 로딩되었을 때, 설정 옵션에 따라 객체 간에 자동으로 할당되는 것
	1) autowire="byType"
		: 객체 간에 특정 메서드의 데이터 타입에 의해 자동 할당 되는 것.
		<bean class="springweb.a02_di_exp.z01_vo.Woman"
			c:name="김태희" c:age="30" c:loc="서울청담동"/>
		<bean class="springweb.a02_di_exp.z01_vo.Man"
			c:name="조인성" autowire="byType"/>
	2) autowire="byName"
		: 객체 간에 할당할 매개변수 타입이 같고, 메서드 set의 property가 참조객체 id값과
		동일 할 때, 할당 된다.
		<bean id="mart" class="springweb.a02_di_exp.z01_vo.Mart"
			c:name="디마트" autowire="byName"/>
		
		springweb.a02_di_exp.z01_vo.Mart 내에
		public void setProduct(Product prod){} 존재하여
		
		<bean id="product" class="springweb.a02_di_exp.z01_vo.Product"
			c:_0="banana" c:_1="2000" c:_2="5"/>
		일 때 product 가 자동 할당된다.


5. 스프링 컨테이너에서 소스상 annonation으로 @Autowired를 선언할 때,
	선언하는 tag를 기술하세요.
		<context:annotation-config/>
	
6. 스프링의 설정 annotation 가운 데 required=false와 Qualier의 사용
	용도와 실제 설정 방법을 소스를 통해서 기술하세요.
		@Autowired(required=false)
		: bean 컨테이너 안에 객체가 생성되지 않더라도, 에러를 발생시키지 않기 위해 처리하는 옵션
		@Qualifier
		: 컨테이너에서 같은 type의 여러 객체를 선언했을 때, 지정된 객체를 할당하기 위한 설정값
			- 컨테이너 내
			<bean class="springweb.a02_di_exp.z02_anno.Womman"
				c:_0="한예슬" c:_1="20" c:_2="서울관악구">
				<qualifier value="ch01"/>
			</bean>
			- 소스 코드 안에서
			@Qualifier("ch01")
			
		**Man.vo
		public class Man{
			private String name;
			@Autowired(required=false)
			@Qualifier
			private Woman woman;
			....
		}
	
7. 스프링 @Resource와 @Autowired의 차이점과 공통점을 기술하세요.	
	- @Resource 와 @Autowired 의 공통점은 의존 주입으로, 
	특정 프로퍼티를 자동으로 연결해주는 작업을 한다.
	- @Resource 는 컨테이너의 id/name으로 DI 가 가능하다.
	- @Autowired 는 Spring Framework에서 지원한다.
	 type으로 DI가 가능하다.

8. 스프링 container에서는 특정 설정값의 호출 방법의 기술하세요.

	: qualifier option 을 사용하여 컨테이너에 특정 값을 선언하고,
		소스 코드에서 annotation으로 qualifier("특정 값") 옵션을 설정한다.
	<bean class="springweb.a02_di_exp.z02_anno.Woman"
		c:name="이나영" c:age="28" c:loc="서울종로구">
		<qualifier value="ch01"/>
	</bean>

9. 스프링에서 다국어 처리를 하려고 한다. xml에서 설정과 기타 설정파일과
	실제 예제를 통하여 기술하세요.
	1) xml 파일 설
	 <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	 	<property name="basenames">
	 		<list>
	 			<value>패키지명.파일이름</value>
	 			<value>message.greeting</value>
	 		</list>
	 	</property>
	 	<property name="defaultEncoding" value="utf-8"/>
	 </bean>
	
	2) 기타 설정 파일
	- message패키지 하단 greeting.properties, 
	 greeting_ko.properties, 
	 greeting_en.properties 파일 생성
	 : key=value 형식으로 작성
	- di 호출 시
	 : System.out.println(ctx.getMessage("hello",null,Locale.ENGLISH));
	   -> hello key값의 value 값을 greeting_en.properties 에서 가져와서 준다.
	   System.out.println(ctx.getMessage("welcome", new String[] {"MR.hong", "100"}, Locale.ENGLISH));
	   -> welcome key값의 value 값에 "MR.hong", "100"을 {0},{1} 에 각각 넣어준다.
	   
10. 실습예제
	http://localhost:7080/springweb/math.do
	를 통해  임의의 수학문제 10 문제를 list하고 해당 입력값을 입력 후,
	최하단에 입력완료를 클릭하면, 정답 수와 점수를 출력 처리하세요.
	수학문제 10문제(구구단, 덧셈, 뺄셈, 나누기 )
	
	//springweb//a01_start//H02_HWController.java
	//WEB-INF//view//h02_mathInit.jsp
	//WEB-INF//view//h02_mathResult.jsp
	
	
	
	
	
	
	